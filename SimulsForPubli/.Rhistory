effect_Sp
SpNumbers[sp, occ]
i
occ
sp
1/(1+exp(-( meanphi + effect_Occasions[occ] + effect_Sp[sp] ) ) )
i
occ
PHI[i,occ]
PHI[i,occ] <- 1/(1+exp(-( meanphi + effect_Occasions[occ] + effect_Sp[sp] ) ) )
PHI[i,occ]
PHI <- matrix( data = NA, ncol = n.occasions-1, nrow = sum( SpNumbers[,-1] ) )
i <- 1
for (occ in 1:(n.occasions-1))
{
for (sp in 1:n.sp)
{
nind <- SpNumbers[sp, occ]
for (ind in 1:nind)
{
PHI[i,occ] <- 1/(1+exp(-( meanphi + effect_Occasions[occ] + effect_Sp[sp] ) ) )
i <- i+1
}
}
}
n.sp
sp
PHI
summary(PHI)
PHI <- matrix( data = NA, ncol = n.occasions-1, nrow = sum( SpNumbers[,-1] ) )
for (occ in 1:(n.occasions-1))
{
i <- 1
for (sp in 1:n.sp)
{
nind <- SpNumbers[sp, occ]
for (ind in 1:nind)
{
PHI[i,occ] <- 1/(1+exp(-( meanphi + effect_Occasions[occ] + effect_Sp[sp] ) ) )
i <- i+1
}
}
}
PHI
SpNumbers
SpNumbers <- read.table(file = "SpNumbers.txt", header=TRUE)
SpNumbers <- SpNumbers[,-1]
SpNumbers
n.occasions <- ncol(SpNumbers)  # Number of capture occasions
meanphi<-0 #logit intercept survival (i.e 0.5 on survival scale)
effect_Occasions<-c(0,rnorm(n = n.occasions-2,mean = 0,sd = 0.5))#time effect
n.sp <- nrow(SpNumbers)
effect_Sp<-c(0,rnorm(n = n.sp-1,mean=0,sd=1))
p <- rep(0.4, n.occasions-1)#constant recapture probability
PHI <- matrix( data = NA, ncol = n.occasions-1, nrow = sum( SpNumbers[,-1] ) )
for (occ in 1:(n.occasions-1))
{
i <- 1
for (sp in 2:n.sp)
{
nind <- SpNumbers[sp, occ]
for (ind in 1:nind)
{
PHI[i,occ] <- 1/(1+exp(-( meanphi + effect_Occasions[occ] + effect_Sp[sp] ) ) )
i <- i+1
}
}
}
PHI
colMeans(PHI)
summary(PHI)
View(PHI)
i
PHI <- matrix( data = NA, ncol = n.occasions-1, nrow = sum( SpNumbers[,-1] ) )
countind <- 1
for (sp in 2:n.sp)
{
spe <-  effect_Sp[sp]
for (occ in 1:(n.occasions-1))
{
oce <- effect_Occasions[occ]
nind <- SpNumbers[sp, occ]
PHI[countind:(countind+nind-1),occ] <- 1/(1+exp(-( meanphi + oce + spe) ) )
countind <- countind + nind
}
}
colMeans(PHI)
summary(PHI)
occ
sum( SpNumbers)
PHI <- matrix( data = NA, ncol = n.occasions-1, nrow = sum( SpNumbers) )
countind <- 1
for (sp in 1:n.sp)
{
spe <-  effect_Sp[sp]
for (occ in 1:(n.occasions-1))
{
oce <- effect_Occasions[occ]
nind <- SpNumbers[sp, occ]
PHI[countind:(countind+nind-1),occ] <- 1/(1+exp(-( meanphi + oce + spe) ) )
countind <- countind + nind
}
}
colMeans(PHI)
summary(PHI)
sp <- 1
spe <-  effect_Sp[sp]
spe
occ <- 1
oce <- effect_Occasions[occ]
oce
nind <- SpNumbers[sp, occ]
nind
PHI <- matrix( data = NA, ncol = n.occasions-1, nrow = sum( SpNumbers) )
countind <- 1
for (sp in 1:n.sp)
{
spe <-  effect_Sp[sp]
nind <- SpNumbers[sp, occ]
for (occ in 1:(n.occasions-1))
{
oce <- effect_Occasions[occ]
PHI[countind:(countind+nind-1),occ] <- 1/(1+exp(-( meanphi + oce + spe) ) )
}
countind <- countind + nind
}
colMeans(PHI)
summary(PHI)
sp = 1
occ =1
oce <- effect_Occasions[occ]
spe <-  effect_Sp[sp]
nind <- SpNumbers[sp, occ]
nind
countind
setwd(dir = "~/Documents/GitHub/penguinteam/")
library(R2jags)
###### Simulation model phi(sp+t) p(.) #####
n.occasions <- 10                   # Number of capture occasions
meanphi<-0#logit intercept survival (i.e 0.5 on survival scale)
effect_Occasions<-c(0,rnorm(n = n.occasions-2,mean = 0,sd = 0.5))#time effect
n.sp<-7
effect_Sp<-c(0,rnorm(n = n.sp-1,mean=0,sd=1))
marked <- round(100*(1:n.sp)^-2)   # Annual number of newly marked individuals
p <- rep(0.4, n.occasions-1)#constant recapture probability
# Define matrices with survival and recapture probabilities
PHI <- matrix(NA, ncol = n.occasions-1, nrow = sum(marked))
sp_ind<-sample(x = 1:n.sp,size = sum(marked),replace = TRUE)#to which species does this individual belong?
for (i in 1:sum(marked))
{
for (t in 1:(n.occasions-1))
{
PHI[i,t]<-1/(1+exp(-( meanphi + effect_Occasions[t] + effect_Sp[sp_ind[i]] ) ) )# additive effects only
}
}
summary(PHI)
nind <- sum(SpNumbers[sp,])
nind
PHI <- matrix( data = NA, ncol = n.occasions-1, nrow = sum( SpNumbers) )
countind <- 1
for (sp in 1:n.sp)
{
spe <-  effect_Sp[sp]
nind <- sum(SpNumbers[sp,])
for (occ in 1:(n.occasions-1))
{
oce <- effect_Occasions[occ]
PHI[countind:(countind+nind-1),occ] <- 1/(1+exp(-( meanphi + oce + spe) ) )
}
countind <- countind + nind
}
colMeans(PHI)
summary(PHI)
rowSums(SpNumbers)
sum(rowSums(SpNumbers))
SpTots <- rowSums(SpNumbers)
CumulTots <- cumsum(SpTots)
CumulTots
CumulTots <- c(1, cumsum(SpTots))
sp
n.sp
PHI <- matrix( data = NA, ncol = n.occasions-1, nrow = sum( SpNumbers) )
SpTots <- rowSums(SpNumbers)
CumulTots <- c(0, cumsum(SpTots))
countind <- 1
for (sp in 1:n.sp)
{
spe <-  effect_Sp[sp]
#nind <- sum(SpNumbers[sp,])
for (occ in 1:(n.occasions-1))
{
oce <- effect_Occasions[occ]
PHI[(CumulTots[sp]+1):CumulTots[sp+1],occ] <- 1/(1+exp(-( meanphi + oce + spe) ) )
}
countind <- countind + nind
}
colMeans(PHI)
summary(PHI)
image(PHI)
n.occasions
SpNumbers <- read.table(file = "SpNumbers.txt", header=TRUE)
SpNumbers <- SpNumbers[,-1]
setwd(dir = "~/Documents/GitHub/penguinteam/SimulsForPubli/")
library(R2jags)
SpNumbers <- read.table(file = "SpNumbers.txt", header=TRUE)
SpNumbers <- SpNumbers[,-1]
n.occasions <- ncol(SpNumbers)  # Number of capture occasions
meanphi<-0 #logit intercept survival (i.e 0.5 on survival scale)
effect_Occasions<-c(0,rnorm(n = n.occasions-2,mean = 0,sd = 0.5))#time effect
n.sp <- nrow(SpNumbers)
effect_Sp<-c(0,rnorm(n = n.sp-1,mean=0,sd=1))
n.occasions
meanphi
effect_Occasions<-c(0,rnorm(n = n.occasions-2,mean = 0,sd = 0.5))#time effect
n.sp <- nrow(SpNumbers)
effect_Sp<-c(0,rnorm(n = n.sp-1,mean=0,sd=1))
n.sp
p <- rep(0.4, n.occasions-1)#constant recapture probability
PHI <- matrix( data = NA, ncol = n.occasions-1, nrow = sum( SpNumbers) )
SpTots <- rowSums(SpNumbers)
CumulTots <- c(0, cumsum(SpTots))
CumulTots
for (sp in 1:n.sp)
{
spe <-  effect_Sp[sp]
#nind <- sum(SpNumbers[sp,])
for (occ in 1:(n.occasions-1))
{
oce <- effect_Occasions[occ]
PHI[(CumulTots[sp]+1):CumulTots[sp+1],occ] <- 1/(1+exp(-( meanphi + oce + spe) ) )
}
}
PHI
colMeans(PHI)
summary(PHI)
plot(colMeans(PHI), effect_Occasions)
P <- matrix(p, ncol = n.occasions-1, nrow = sum(SpTots))
P
# Define function to simulate a capture-history (CH) matrix
simul.cjs <- function(PHI, P, marked){
n.occasions <- dim(PHI)[2] + 1
CH <- matrix(0, ncol = n.occasions, nrow = sum(marked))
mark.occ <- rep(1:length(marked), marked[1:length(marked)])  # Define a vector with the occasion of marking
for (i in 1:sum(marked)){# Fill the CH matrix
CH[i, mark.occ[i]] <- 1       # Write an 1 at the release occasion
if (mark.occ[i]==n.occasions) next
for (t in (mark.occ[i]+1):n.occasions){
# Bernoulli trial: does individual survive occasion?
sur <- rbinom(1, 1, PHI[i,t-1])
if (sur==0) break  	# If dead, move to next individual
rp <- rbinom(1, 1, P[i,t-1])# Bernoulli trial: is individual recaptured?
if (rp==1) CH[i,t] <- 1
} #t
} #i
return(CH)
}
CH <- simul.cjs(PHI, P, marked)
CH
get.first <- function(x) min(which(x!=0))
f <- apply(CH, 1, get.first)
known.state.cjs <- function(ch){
state <- ch
for (i in 1:dim(ch)[1]){
n1 <- min(which(ch[i,]==1))
n2 <- max(which(ch[i,]==1))
state[i,n1:n2] <- 1
state[i,n1] <- NA
}
state[state==0] <- NA
return(state)
}
cjs.init.z <- function(ch,f){
for (i in 1:dim(ch)[1]){
if (sum(ch[i,])==1) next
n2 <- max(which(ch[i,]==1))
ch[i,f[i]:n2] <- NA
}
for (i in 1:dim(ch)[1]){
ch[i,1:f[i]] <- NA
}
return(ch)
}
jags.data <- list(y = CH, f = f, nind = dim(CH)[1], n.occasions = dim(CH)[2], z = known.state.cjs(CH), sp_ind=sp_ind, n.sp=length(unique(sp_ind)) )
beta.tXsp_ini<-function()
{beta.tXsp<-matrix(NA,nrow = n.occasions-1,ncol = n.sp)
for (i in 2:(n.occasions-1))
{
for (j in 2:n.sp)
{
beta.tXsp[i,j]<-rnorm(n = 1,mean = 0,sd = 1)
}
}
return(beta.tXsp)
}
inits <- function(){list(z = cjs.init.z(CH, f), phi.mean = runif(1, 0, 1), p.mean = runif(1, 0, 1),
beta.t=c(NA,rnorm(n = n.occasions-2,mean = 0,sd=1 ) ),
beta.sp=c(NA,rnorm(n = n.sp-1,mean = 0,sd=1 ) ),
beta.tXsp= beta.tXsp_ini() )}
parameters <- c("phi.mean", "p.mean","beta.t","beta.sp","beta.tXsp", "sigma.sp", "sigma.t", "sigma.tXsp")
ni <- 11000
nt <- 10
nb <- 1000
nc <- 3
cjs.interactionS <- jags(jags.data, inits, parameters, "cjs-phi(spXt)p(.).jags",
n.chains = nc, n.thin = nt, n.iter = ni, n.burnin = nb, working.directory = getwd())
sink("cjs-phi(spXt)p(.).jags")
cat("
model {
# Priors and constraints
for (i in 1:nind){
for (t in f[i]:(n.occasions-1)){
logit(phi[i,t]) <- mu.phi + beta.t[t] + beta.sp[ sp_ind[i] ] + beta.tXsp[ t,sp_ind[i] ]
logit(p[i,t]) <- mu.p
} #t
} #i
meanphi ~ dunif(0, 1)              # Priors for group-specific survival
mu.phi<- log(phi.mean/(1-phi.mean))
phi.mean ~ dunif(0,1)
for (t in 1:(n.occasions-1)){
beta.t[t] ~ dnorm(0,tau.t)
}
tau.t <- pow(sigma.t, -2)
sigma.t ~ dunif(0,10)
for (sp in 1:n.sp){
beta.sp[sp] ~ dnorm(0,tau.sp)
for (t in 1:(n.occasions-1)){
beta.tXsp[t,sp] ~ dnorm(0,tau.tXsp)
}
}
tau.sp <- pow(sigma.sp, -2)
sigma.sp ~ dunif(0,10)
tau.tXsp <- pow(sigma.tXsp, -2)
sigma.tXsp ~ dunif(0,10)
mu.p <- log(p.mean/(1-p.mean))
p.mean ~ dunif(0,1)
# Likelihood
for (i in 1:nind){
# Define latent state at first capture
z[i,f[i]] <- 1
for (t in (f[i]+1):n.occasions){
# State process
z[i,t] ~ dbern(mu1[i,t])
mu1[i,t] <- phi[i,t-1] * z[i,t-1]
# Observation process
y[i,t] ~ dbern(mu2[i,t])
mu2[i,t] <- p[i,t-1] * z[i,t]
} #t
} #i
}
",fill = TRUE)
sink()
cjs.interactionS <- jags(jags.data, inits, parameters, "cjs-phi(spXt)p(.).jags",
n.chains = nc, n.thin = nt, n.iter = ni, n.burnin = nb, working.directory = getwd())
n.sp
beta.sp
beta.tXsp_ini<-function()
{beta.tXsp<-matrix(NA,nrow = n.occasions-1,ncol = n.sp)
for (i in 1:(n.occasions-1))
{
for (j in 1:n.sp)
{
beta.tXsp[i,j]<-rnorm(n = 1,mean = 0,sd = 1)
}
}
return(beta.tXsp)
}
inits <- function(){list(z = cjs.init.z(CH, f), phi.mean = runif(1, 0, 1), p.mean = runif(1, 0, 1),
beta.t=c(NA,rnorm(n = n.occasions-1,mean = 0,sd=1 ) ),
beta.sp=c(NA,rnorm(n = n.sp,mean = 0,sd=1 ) ),
beta.tXsp= beta.tXsp_ini() )}
parameters <- c("phi.mean", "p.mean","beta.t","beta.sp","beta.tXsp", "sigma.sp", "sigma.t", "sigma.tXsp")
ni <- 11000
nt <- 10
nb <- 1000
nc <- 3
cjs.interactionS <- jags(jags.data, inits, parameters, "cjs-phi(spXt)p(.).jags",
n.chains = nc, n.thin = nt, n.iter = ni, n.burnin = nb, working.directory = getwd())
print(cjs.interactionS, digits = 3)
inits()
n.occasions
sink("cjs-phi(spXt)p(.).jags")
cat("
model {
# Priors and constraints
for (i in 1:nind){
for (t in f[i]:(n.occasions-1)){
logit(phi[i,t]) <- mu.phi + beta.t[t] + beta.sp[ sp_ind[i] ] + beta.tXsp[ t,sp_ind[i] ]
logit(p[i,t]) <- mu.p
} #t
} #i
meanphi ~ dunif(0, 1)              # Priors for group-specific survival
mu.phi<- log(phi.mean/(1-phi.mean))
phi.mean ~ dunif(0,1)
for (t in 1:(n.occasions-1)){
beta.t[t] ~ dnorm(0,tau.t)
}
tau.t <- pow(sigma.t, -2)
sigma.t ~ dunif(0,10)
for (sp in 1:n.sp){
beta.sp[sp] ~ dnorm(0,tau.sp)
for (t in 1:(n.occasions-1)){
beta.tXsp[t,sp] ~ dnorm(0,tau.tXsp)
}
}
tau.sp <- pow(sigma.sp, -2)
sigma.sp ~ dunif(0,10)
tau.tXsp <- pow(sigma.tXsp, -2)
sigma.tXsp ~ dunif(0,10)
mu.p <- log(p.mean/(1-p.mean))
p.mean ~ dunif(0,1)
# Likelihood
for (i in 1:nind){
# Define latent state at first capture
z[i,f[i]] <- 1
for (t in (f[i]+1):n.occasions){
# State process
z[i,t] ~ dbern(mu1[i,t])
mu1[i,t] <- phi[i,t-1] * z[i,t-1]
# Observation process
y[i,t] ~ dbern(mu2[i,t])
mu2[i,t] <- p[i,t-1] * z[i,t]
} #t
} #i
}
",fill = TRUE)
sink()
jags.data <- list(y = CH, f = f, nind = dim(CH)[1], n.occasions = dim(CH)[2], z = known.state.cjs(CH), sp_ind=sp_ind, n.sp=length(unique(sp_ind)) )
beta.tXsp_ini<-function()
{beta.tXsp<-matrix(NA,nrow = n.occasions-1,ncol = n.sp)
for (i in 1:(n.occasions-1))
{
for (j in 1:n.sp)
{
beta.tXsp[i,j]<-rnorm(n = 1,mean = 0,sd = 1)
}
}
return(beta.tXsp)
}
inits <- function(){list(z = cjs.init.z(CH, f), phi.mean = runif(1, 0, 1), p.mean = runif(1, 0, 1),
beta.t=c(rnorm(n = n.occasions-1,mean = 0,sd=1 ) ),
beta.sp=c(rnorm(n = n.sp,mean = 0,sd=1 ) ),
beta.tXsp= beta.tXsp_ini() )}
parameters <- c("phi.mean", "p.mean","beta.t","beta.sp","beta.tXsp", "sigma.sp", "sigma.t", "sigma.tXsp")
ni <- 11000
nt <- 10
nb <- 1000
nc <- 3
cjs.interactionS <- jags(jags.data, inits, parameters, "cjs-phi(spXt)p(.).jags",
n.chains = nc, n.thin = nt, n.iter = ni, n.burnin = nb, working.directory = getwd())
inits()
sp_ind
length(unique(sp_ind))
sp_ind
sp_ind <- vector(length = sum(SpTots), NA)
sp_ind <- vector(length = sum(SpTots))
sp_ind
PHI <- matrix( data = NA, ncol = n.occasions-1, nrow = sum( SpNumbers) )
SpTots <- rowSums(SpNumbers)
CumulTots <- c(0, cumsum(SpTots))
sp_ind <- vector(length = sum(SpTots))
for (sp in 1:n.sp)
{
spe <-  effect_Sp[sp]
sp_ind[(CumulTots[sp]+1):CumulTots[sp+1]] <- sp
#nind <- sum(SpNumbers[sp,])
for (occ in 1:(n.occasions-1))
{
oce <- effect_Occasions[occ]
PHI[(CumulTots[sp]+1):CumulTots[sp+1],occ] <- 1/(1+exp(-( meanphi + oce + spe) ) )
}
}
sp_ind
jags.data <- list(y = CH, f = f, nind = dim(CH)[1], n.occasions = dim(CH)[2], z = known.state.cjs(CH), sp_ind=sp_ind, n.sp=n.sp)
beta.tXsp_ini<-function()
{beta.tXsp<-matrix(NA,nrow = n.occasions-1,ncol = n.sp)
for (i in 1:(n.occasions-1))
{
for (j in 1:n.sp)
{
beta.tXsp[i,j]<-rnorm(n = 1,mean = 0,sd = 1)
}
}
return(beta.tXsp)
}
inits <- function(){list(z = cjs.init.z(CH, f), phi.mean = runif(1, 0, 1), p.mean = runif(1, 0, 1),
beta.t=c(rnorm(n = n.occasions-1,mean = 0,sd=1 ) ),
beta.sp=c(rnorm(n = n.sp,mean = 0,sd=1 ) ),
beta.tXsp= beta.tXsp_ini() )}
parameters <- c("phi.mean", "p.mean","beta.t","beta.sp","beta.tXsp", "sigma.sp", "sigma.t", "sigma.tXsp")
ni <- 11000
nt <- 10
nb <- 1000
nc <- 3
cjs.interactionS <- jags(jags.data, inits, parameters, "cjs-phi(spXt)p(.).jags",
n.chains = nc, n.thin = nt, n.iter = ni, n.burnin = nb, working.directory = getwd())
print(cjs.interactionS, digits = 3)
predictions <- cjs.interactionS$BUGSoutput$mean$beta.tXsp+ +matrix(cjs.interactionS$BUGSoutput$mean$beta.t, nrow = 9, ncol = n.sp, byrow = FALSE)
predictions <- cjs.interactionS$BUGSoutput$mean$beta.tXsp+ +matrix(cjs.interactionS$BUGSoutput$mean$beta.t, nrow = n.occasions-1, ncol = n.sp, byrow = FALSE)
matrix(cjs.interactionS$BUGSoutput$mean$beta.sp, nrow = n.occasions-1, ncol = n.sp, byrow = TRUE)
predictions <- cjs.interactionS$BUGSoutput$mean$beta.tXsp+ +matrix(cjs.interactionS$BUGSoutput$mean$beta.t, nrow = n.occasions-1, ncol = n.sp, byrow = FALSE)
predictions
for(i in 1:n.sp)
{
lines(predictions[,i])
}
plot(predictions[,1], type="l", ylim=c(-0.5,0.5), xlab="year", main="With year RE")
for(i in 1:n.sp)
{
lines(predictions[,i])
}
cjs.interaction$BUGSoutput$mean$sigma.t/(cjs.interaction$BUGSoutput$mean$sigma.tXsp+cjs.interaction$BUGSoutput$mean$sigma.t)
cjs.interactionS$BUGSoutput$mean$sigma.t/(cjs.interactionS$BUGSoutput$mean$sigma.tXsp+cjs.interactionS$BUGSoutput$mean$sigma.t)
